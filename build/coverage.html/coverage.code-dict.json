{"/home/travis/build/npmtest/node-npmtest-recess/test.js":"/* istanbul instrument in package npmtest_recess */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-recess/lib.npmtest_recess.js":"/* istanbul instrument in package npmtest_recess */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_recess = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_recess = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-recess/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-recess && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_recess */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_recess\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_recess.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_recess.rollup.js'] =\n            local.assetsDict['/assets.npmtest_recess.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_recess.__dirname + '/lib.npmtest_recess.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/index.js":"// ==========================================\n// RECESS\n// INDEX: The root api definition\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\n// require core\nvar RECESS = require('./core')\n  , colors = require('colors')\n\n// define main export\nmodule.exports = function (paths, options, callback) {\n\n  var option, message, i, instances = []\n\n  // if no options default to empty object\n  options = options || {}\n\n  // if options is a function, set to callback and set options to {}\n  if (typeof options == 'function') (callback = options) && (options = {})\n\n  // if single path, convert to array\n  if (typeof paths == 'string') paths = [paths]\n\n  // there were no paths, show the docs\n  if (!paths || !paths.length) return module.exports.docs()\n\n  // if a compress flag is present, we automatically make compile flag true\n  options.compress && (options.compile = true)\n\n  // if format is set to compact, automatically set noSummary\n  options.format && (options.format == 'compact') && (options.noSummary = true)\n\n  // if not compiling, let user know which files will be linted\n  if (!options.compile && options.cli && !options.noSummary) {\n    message = \"\\nAnalyzing the following files: \" + ((paths + '').replace(/,/g, ', ') + '\\n').grey\n    options.stripColors && (message = message.stripColors)\n    console.log(message)\n  }\n\n  // for each path, create a new RECESS instance\n  function recess(init, path, err) {\n    if (path = paths.shift()) {\n      return instances.push(new RECESS(path, options, recess))\n    }\n\n    // map/filter for errors\n    err = instances\n      .map(function (i) {\n        return i.errors.length && i.errors\n      })\n      .filter(function (i) {\n        return i\n      })\n\n    // if no error, set explicitly to null\n    err = err.length ? err[0] : null\n\n    //callback\n    callback && callback(err, instances)\n  }\n\n  // start processing paths\n  recess(true)\n}\n\n// default options\nmodule.exports.DEFAULTS = RECESS.DEFAULTS = {\n  compile: false\n, compress: false\n, config: false\n, format: 'text'\n, includePath: []\n, noIDs: true\n, noJSPrefix: true\n, noOverqualifying: true\n, noSummary: false\n, noUnderscores: true\n, noUniversalSelectors: true\n, prefixWhitespace: true\n, strictPropertyOrder: true\n, stripColors: false\n, watch: false\n, zeroUnits: true\n, inlineImages: false\n}\n\n\n// expose RAW RECESS class\nmodule.exports.Constructor = RECESS\n\n// expose docs\nmodule.exports.docs = function () {\n  console.log(\"\\nGENERAL USE: \" + \"$\".grey + \" recess\".cyan + \" [path] \".yellow + \"[options]\\n\".grey)\n  console.log(\"OPTIONS:\")\n  for (var option in RECESS.DEFAULTS) console.log('  --' + option)\n  console.log(\"\\nEXAMPLE:\\n\\n\" + \"  $\".grey + \" recess\".cyan + \" ./bootstrap.css \".yellow + \"--noIDs false\\n\".grey)\n  console.log('GENERAL HELP: ' + 'http://git.io/recess\\n'.yellow)\n}\n","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/core.js":"// ==========================================\n// RECESS\n// CORE: The core class definition\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\nvar _ = require('underscore')\n  , colors = require('colors')\n  , less = require('less')\n  , util = require('./util')\n  , path = require('path')\n  , fs = require('fs')\n\n// core class defintion\nfunction RECESS(path, options, callback) {\n  this.path = path\n  this.output = []\n  this.errors = []\n  this.options = _.extend({}, RECESS.DEFAULTS, options)\n  path && this.read()\n  this.callback = callback\n}\n\n// instance methods\nRECESS.prototype = {\n\n  constructor: RECESS\n\n, log: function (str, force) {\n\n    if (this.options.stripColors) str = str.stripColors\n\n    // if compiling only write with force flag\n    if (!this.options.compile || force) {\n      this.options.cli ? console.log(str) : this.output.push(str)\n    }\n\n  }\n\n, read: function () {\n    var that = this\n\n    // try to read data from path\n    fs.readFile(this.path, 'utf8', function (err, data) {\n\n      //  if err, exit with could not read message\n      if (err) {\n        that.errors.push(err)\n        that.log('Error reading file: '.red + String(that.path).grey + '\\n', true)\n        return that.callback && that.callback()\n      }\n\n      // set instance data\n      that.data = data\n\n      // parse data\n      that.parse()\n\n    })\n  }\n\n, parse: function () {\n    var that = this\n      , options = {\n          paths: [path.dirname(this.path)].concat(this.options.includePath)\n        , optimization: 0\n        , filename: this.path && this.path.replace(/.*(?=\\/)\\//, '')\n        }\n\n    // try to parse with less parser\n    try {\n\n      // instantiate new parser with options\n      new less.Parser(options)\n\n        // parse data into tree\n        .parse(this.data, function (err, tree) {\n\n          if (err) {\n            // push to errors array\n            that.errors.push(err)\n\n            if (err.type == 'Parse') {\n              // parse error\n              that.log(\"Parser error\".red + (err.filename ? ' in ' + err.filename : '') + '\\n')\n            } else {\n              // other exception\n              that.log(String(err.name).red + \": \" + err.message + ' of ' + String(err.filename).yellow + '\\n')\n            }\n\n            // if extract - then log it\n            err.extract && err.extract.forEach(function (line, index) {\n              that.log(util.padLine(err.line + index) + line)\n            })\n\n            // add extra line for readability after error log\n            that.log(\" \")\n\n            // exit with callback if present\n            return that.callback && that.callback()\n          }\n\n          // test to see if file has a less extension\n          if (/less$/.test(that.path) && !that.parsed) {\n\n            // if it's a LESS file, we flatten it\n            that.data = tree.toCSS({})\n\n            // set parse to true so as to not infinitely reparse less files\n            that.parsed = true\n\n            // reparse less file\n            return that.parse()\n          }\n\n          // set definitions to parse tree\n          that.definitions = tree.rules\n\n          // validation defintions\n          that.options.compile ? that.compile() : that.validate()\n        })\n\n    } catch (err) {\n\n      // less exploded trying to parse the file (╯°□°）╯︵ ┻━┻\n      // push to errors array\n      that.errors.push(err)\n\n      // log a message trying to explain why\n      that.log(\n          \"Parse error\".red\n        + \": \"\n        + err.message\n        + \" on line \"\n        + util.getLine(err.index, this.data)\n      )\n\n      // exit with callback if present\n      this.callback && this.callback()\n    }\n  }\n\n, compile: function () {\n    var that = this\n      , key\n      , css\n\n    // activate all relevant compilers\n    Object.keys(this.options).forEach(function (key) {\n      that.options[key]\n        && RECESS.COMPILERS[key]\n        && RECESS.COMPILERS[key].on.call(that)\n    })\n\n    // iterate over defintions and compress them (join with new lines)\n    css = this.definitions.map(function (def) {\n      return def.toCSS([[]], { data: that.data, compress: that.options.compress })\n    }).join(this.options.compress ? '' : '\\n')\n\n    // minify with cssmin\n    if (that.options.compress) css = require('./min').compressor.cssmin(css)\n\n    // deactivate all relevant compilers\n    Object.keys(this.options).reverse().forEach(function (key) {\n      that.options[key]\n        && RECESS.COMPILERS[key]\n        && RECESS.COMPILERS[key].off()\n    })\n\n    // cleanup trailing newlines\n    css = css.replace(/[\\n\\s\\r]*$/, '')\n\n    // output css\n    this.log(css, true)\n\n    // callback and exit\n    this.callback && this.callback()\n  }\n\n, validate: function () {\n    var failed\n      , key\n\n    // iterate over instance options\n    for (key in this.options) {\n\n      // if option has a validation, then we test it\n      this.options[key]\n        && RECESS.RULES[key]\n        && !this.test(RECESS.RULES[key])\n        && (failed = true)\n\n    }\n\n    // exit with failed flag to validateStatus\n    this.validateStatus(failed)\n  }\n\n, test: function (validation) {\n    var l = this.definitions.length\n      , i = 0\n      , isValid = true\n      , rule\n      , def\n      , j\n      , k\n\n    // test each definition against a given validation\n    for (; i < l; i++) {\n      def = this.definitions[i]\n      if (!validation(def, this.data)) isValid = false\n    }\n\n    // return valid state\n    return isValid\n  }\n\n, validateStatus: function (failed) {\n    var that = this\n      , fails\n      , formatter\n\n    if (failed) {\n\n      // count errors\n      fails = util.countErrors(this.definitions)\n\n      if (!this.options.noSummary) {\n        // log file overview\n        this.log('FILE: ' + this.path.cyan)\n        this.log('STATUS: ' + 'Busted'.magenta)\n        this.log('FAILURES: ' + (fails + ' failure' + (fails > 1 ? 's' : '')).magenta + '\\n')\n      }\n\n      if (this.options.format && this.options.format == 'compact') {\n        formatter = function (err) {\n          that.log(that.path + ':' + err.line + ':' + err.message)\n        }\n      } else {\n        formatter = function (err) {\n          that.log(err.message)\n          err.extract && that.log(err.extract + '\\n')\n        }\n      }\n\n      // iterate through each definition\n      this.definitions.forEach(function (def) {\n\n        // if there's an error, log the error and optional err.extract\n        def.errors\n          && def.errors.length\n          && def.errors.forEach(formatter)\n      })\n\n    } else {\n      // it was a success - let the user know!\n      this.log('FILE: ' + this.path.cyan)\n      this.log('STATUS: ' + 'Perfect!\\n'.yellow)\n    }\n\n    // callback and exit\n    this.callback && this.callback()\n  }\n\n}\n\n// import validation rules\nRECESS.RULES = {}\n\nfs.readdirSync(path.join(__dirname, 'lint')).forEach(function (name) {\n  var camelName = name\n    .replace(/(\\-[a-z])/gi, function ($1) { return $1.toUpperCase().replace('-', '') })\n    .replace(/\\.js$/, '')\n  RECESS.RULES[camelName] = require(path.join(__dirname, 'lint', name))\n})\n\n// import compilers\nRECESS.COMPILERS = {}\n\nfs.readdirSync(path.join(__dirname, 'compile')).forEach(function (name) {\n  var camelName = name\n    .replace(/(\\-[a-z])/gi, function ($1) { return $1.toUpperCase().replace('-', '') })\n    .replace(/\\.js$/, '')\n  RECESS.COMPILERS[camelName] = require(path.join(__dirname, 'compile', name))\n})\n\n// export class\nmodule.exports = RECESS","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/util.js":"// ==========================================\n// RECESS\n// UTIL: simple output util methods\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\nvar _ = require('underscore')\n\nmodule.exports = {\n\n  // set fail output object\n  throwError: function (def, err) {\n    def.errors = def.errors || []\n    err.message = err.message.cyan\n    def.errors.push(err)\n  }\n\n  // set line padding\n, padLine: function (line) {\n    var num = (line + '. ')\n      , space = ''\n      _.times(10 - num.length, function () { space += ' ' })\n    return (space + num).grey\n  }\n\n  // get line number from data\n, getLine: function (index, data) {\n    return (data.slice(0, index).match(/\\n/g) || \"\").length + 1;\n  }\n\n  // error counter\n, countErrors: function (definitions) {\n    var fails = 0\n    definitions.forEach(function (def) {\n      def.errors\n        && def.errors.length\n        && def.errors.forEach(function (err) { fails++ })\n    })\n    return fails\n  }\n\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/lint/inline-images.js":"// ===================================================\n// RECESS\n// RULE: Linked images should be embeded.\n// ===================================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ===================================================\n\n'use strict'\n\nvar util = require('../util')\n  , RULE = {\n      type: 'inlineImages'\n    , exp: /^url\\((?!data:)/\n    , message: 'Linked images should be embeded.'\n    }\n\n// validation method\nmodule.exports = function (def, data) {\n\n  // default validation to true\n  var isValid = true\n\n  // return if no selector to validate\n  if (!def.rules) return isValid\n\n  // loop over selectors\n  def.rules.forEach(function (rule) {\n    var extract\n      , line\n\n    // continue to next rule if no url is present\n    if ( !(rule.value\n        && rule.value.is == 'value'\n        && RULE.exp.test(rule.value.toCSS({}))) ) return\n\n    // calculate line number for the extract\n    line = util.getLine(rule.index, data)\n    extract = util.padLine(line)\n\n    // highlight invalid 0 units\n    extract += rule.toCSS({}).replace(RULE.exp, function ($1) {\n      return $1.magenta\n    })\n\n    // set invalid flag to false\n    isValid = false\n\n    // set error object on defintion token\n    util.throwError(def, {\n      type: RULE.type\n    , message: RULE.message\n    , extract: extract\n    , line: line\n    })\n\n  })\n\n  // return validation state\n  return isValid\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/lint/no-IDs.js":"// ==========================================\n// RECESS\n// RULE: Id's should not be styled\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\nvar util = require('../util')\n  , RULE = {\n      type: 'noIDs'\n    , exp: /^#/\n    , message: 'Id\\'s should not be styled'\n    }\n\n// validation method\nmodule.exports = function (def, data) {\n\n  // default validation to true\n  var isValid = true\n\n  // return if no selectors to validate\n  if (!def.selectors) return isValid\n\n  // loop over selectors\n  def.selectors.forEach(function (selector) {\n\n    // loop over selector entities\n    selector.elements.forEach(function (element) {\n\n      var extract\n        , line\n\n      // continue to next element if no js- prefix\n      if (!RULE.exp.test(element.value)) return\n\n      // calculate line number for the extract\n      line = util.getLine(element.index - element.value.length, data)\n      extract = util.padLine(line)\n\n      // highlight invalid styling of ID\n      extract += element.value.replace(RULE.exp, '#'.magenta)\n\n      // set invalid flag to false\n      isValid = false\n\n      // set error object on defintion token\n      util.throwError(def, {\n        type: RULE.type\n      , message: RULE.message\n      , extract: extract\n      , line: line\n      })\n\n    })\n  })\n\n  // return valid state\n  return isValid\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/lint/no-JS-prefix.js":"// ==========================================\n// RECESS\n// RULE: .js prefixes should not be styled\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\nvar util = require('../util')\n  , RULE = {\n      type: 'noJSPrefix'\n    , exp: /^\\.js\\-/\n    , message: '.js prefixes should not be styled'\n    }\n\n// validation method\nmodule.exports = function (def, data) {\n\n  // default validation to true\n  var isValid = true\n\n  // return if no selector to validate\n  if (!def.selectors) return isValid\n\n  // loop over selectors\n  def.selectors.forEach(function (selector) {\n\n    // loop over selector entities\n    selector.elements.forEach(function (element) {\n\n      var extract\n        , line\n\n      // continue to next element if .js- prefix not styled\n      if (!RULE.exp.test(element.value)) return\n\n      // calculate line number for the extract\n      line = util.getLine(element.index - element.value.length, data)\n      extract = util.padLine(line)\n\n      // highlight invalid styling of .js- prefix\n      extract += element.value.replace(RULE.exp, '.js-'.magenta)\n\n      // set invalid flag to false\n      isValid = false\n\n      // set error object on defintion token\n      util.throwError(def, {\n        type: RULE.type\n      , message: RULE.message\n      , extract: extract\n      , line: line\n      })\n\n    })\n\n  })\n\n  // return valid state\n  return isValid\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/lint/no-overqualifying.js":"// ===================================================\n// RECESS\n// RULE: Element selectors should not be overqualified\n// ===================================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ===================================================\n\n'use strict'\n\nvar util = require('../util')\n  , RULE = {\n      type: 'noOverqualifying'\n    , exp: /\\b[\\w\\-\\_]+(?=#|\\.)/\n    , message: 'Element selectors should not be overqualified'\n    }\n\n// validation method\nmodule.exports = function (def, data) {\n\n  // default validation to true\n  var isValid = true\n\n  // return if no selector to validate\n  if (!def.selectors) return isValid\n\n  // loop over selectors\n  def.selectors.forEach(function (selector) {\n\n    // evaluate selector to string and trim whitespace\n    var selectorString = selector.toCSS().trim()\n      , extract\n      , line\n\n    // if selector isn't overqualified continue\n    if (!RULE.exp.test(selectorString)) return\n\n    // calculate line number for the extract\n    line = util.getLine(selector.elements[0].index - selector.elements[0].value.length, data)\n    extract = util.padLine(line)\n\n    // highlight selector overqualification\n    extract += selectorString.replace(RULE.exp, function ($1) { return $1.magenta })\n\n    // set invalid flag to false\n    isValid = false\n\n    // set error object on defintion token\n    util.throwError(def, {\n      type: RULE.type\n    , message: RULE.message\n    , extract: extract\n    , line: line\n    })\n\n  })\n\n  // return validation state\n  return isValid\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/lint/no-underscores.js":"// ==========================================================\n// RECESS\n// RULE: Underscores should not be used when naming selectors\n// ==========================================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================================\n\n'use strict'\n\nvar util = require('../util')\n  , RULE = {\n      type: 'noUnderscores'\n    , exp: /_/g\n    , message: 'Underscores should not be used when naming selectors'\n    }\n\n// validation method\nmodule.exports = function validate(def, data) {\n\n  // default validation to true\n  var isValid = true\n\n  // return if no selector to validate\n  if (!def.selectors) return isValid\n\n  // loop over selectors\n  def.selectors.forEach(function (selector) {\n\n    // loop over selector entities\n    selector.elements.forEach(function (element) {\n\n      var extract\n        , line\n\n      // continue to next element if no underscore\n      if (!RULE.exp.test(element.value)) return\n\n      // calculate line number for the extract\n      line = util.getLine(element.index - element.value.length, data)\n      extract = util.padLine(line)\n\n      // highlight invalid underscores\n      extract += element.value.replace(RULE.exp, '_'.magenta)\n\n      // set invalid flag to false\n      isValid = false\n\n      // set error object on defintion token\n      util.throwError(def, {\n        type: RULE.type\n      , message: RULE.message\n      , extract: extract\n      , line: line\n      })\n\n    })\n  })\n\n  // return valid state\n  return isValid\n\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/lint/no-universal-selectors.js":"// ===========================================\n// RECESS\n// RULE: Universal selectors should be avoided\n// ===========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ===========================================\n\n'use strict'\n\nvar util = require('../util')\n  , RULE = {\n      type: 'noUniversalSelectors'\n    , exp: /\\*/g\n    , message: 'Universal selectors should be avoided'\n    }\n\n// validation method\nmodule.exports = function (def, data) {\n\n  // default validation to true\n  var isValid = true\n\n  // return if no rules to validate\n  if (!def.selectors) return isValid\n\n  // loop over selectors\n  def.selectors.forEach(function (selector) {\n\n    // loop over selector entities\n    selector.elements.forEach(function (element) {\n\n      var extract\n        , line\n\n      // continue to next element if no underscore\n      if (!RULE.exp.test(element.value)) return\n\n      // calculate line number for the extract\n      line = util.getLine(element.index - element.value.length, data)\n      extract = util.padLine(line)\n\n      // highlight the invalid use of a universal selector\n      extract += selector.toCSS({}).replace(RULE.exp, '*'.magenta)\n\n      // set invalid flag to false\n      isValid = false\n\n      // set error object on defintion token\n      util.throwError(def, {\n        type: RULE.type\n      , message: RULE.message\n      , extract: extract\n      , line: line\n      })\n\n    })\n  })\n\n  // return valid state\n  return isValid\n\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/lint/strict-property-order.js":"// ==========================================\n// RECESS\n// RULE: Must use correct property ordering\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\nvar _ = require('underscore')\n  , util = require('../util')\n  , RULE = {\n      type: 'strictPropertyOrder'\n    , message: 'Incorrect property order for rule'\n    }\n\n  // vendor prefix order\n  , vendorPrefixes = [\n      '-webkit-'\n    , '-khtml-'\n    , '-epub-'\n    , '-moz-'\n    , '-ms-'\n    , '-o-'\n    ]\n\n  // hack prefix order\n  , hackPrefixes = [\n      '_' // ie7\n    , '*' // ie6\n    ]\n\n  // css property order\n  , order = [\n      'position'\n    , 'top'\n    , 'right'\n    , 'bottom'\n    , 'left'\n    , 'z-index'\n    , 'display'\n    , 'float'\n    , 'width'\n    , 'height'\n    , 'max-width'\n    , 'max-height'\n    , 'min-width'\n    , 'min-height'\n    , 'padding'\n    , 'padding-top'\n    , 'padding-right'\n    , 'padding-bottom'\n    , 'padding-left'\n    , 'margin'\n    , 'margin-top'\n    , 'margin-right'\n    , 'margin-bottom'\n    , 'margin-left'\n    , 'margin-collapse'\n    , 'margin-top-collapse'\n    , 'margin-right-collapse'\n    , 'margin-bottom-collapse'\n    , 'margin-left-collapse'\n    , 'overflow'\n    , 'overflow-x'\n    , 'overflow-y'\n    , 'clip'\n    , 'clear'\n    , 'font'\n    , 'font-family'\n    , 'font-size'\n    , 'font-smoothing'\n    , 'font-style'\n    , 'font-weight'\n    , 'hyphens'\n    , 'src'\n    , 'line-height'\n    , 'letter-spacing'\n    , 'word-spacing'\n    , 'color'\n    , 'text-align'\n    , 'text-decoration'\n    , 'text-indent'\n    , 'text-overflow'\n    , 'text-rendering'\n    , 'text-size-adjust'\n    , 'text-shadow'\n    , 'text-transform'\n    , 'word-break'\n    , 'word-wrap'\n    , 'white-space'\n    , 'vertical-align'\n    , 'list-style'\n    , 'list-style-type'\n    , 'list-style-position'\n    , 'list-style-image'\n    , 'pointer-events'\n    , 'cursor'\n    , 'background'\n    , 'background-attachment'\n    , 'background-color'\n    , 'background-image'\n    , 'background-position'\n    , 'background-repeat'\n    , 'background-size'\n    , 'border'\n    , 'border-collapse'\n    , 'border-top'\n    , 'border-right'\n    , 'border-bottom'\n    , 'border-left'\n    , 'border-color'\n    , 'border-image'\n    , 'border-top-color'\n    , 'border-right-color'\n    , 'border-bottom-color'\n    , 'border-left-color'\n    , 'border-spacing'\n    , 'border-style'\n    , 'border-top-style'\n    , 'border-right-style'\n    , 'border-bottom-style'\n    , 'border-left-style'\n    , 'border-width'\n    , 'border-top-width'\n    , 'border-right-width'\n    , 'border-bottom-width'\n    , 'border-left-width'\n    , 'border-radius'\n    , 'border-top-right-radius'\n    , 'border-bottom-right-radius'\n    , 'border-bottom-left-radius'\n    , 'border-top-left-radius'\n    , 'border-radius-topright'\n    , 'border-radius-bottomright'\n    , 'border-radius-bottomleft'\n    , 'border-radius-topleft'\n    , 'content'\n    , 'quotes'\n    , 'outline'\n    , 'outline-offset'\n    , 'opacity'\n    , 'filter'\n    , 'visibility'\n    , 'size'\n    , 'zoom'\n    , 'transform'\n    , 'box-align'\n    , 'box-flex'\n    , 'box-orient'\n    , 'box-pack'\n    , 'box-shadow'\n    , 'box-sizing'\n    , 'table-layout'\n    , 'animation'\n    , 'animation-delay'\n    , 'animation-duration'\n    , 'animation-iteration-count'\n    , 'animation-name'\n    , 'animation-play-state'\n    , 'animation-timing-function'\n    , 'animation-fill-mode'\n    , 'transition'\n    , 'transition-delay'\n    , 'transition-duration'\n    , 'transition-property'\n    , 'transition-timing-function'\n    , 'background-clip'\n    , 'backface-visibility'\n    , 'resize'\n    , 'appearance'\n    , 'user-select'\n    , 'interpolation-mode'\n    , 'direction'\n    , 'marks'\n    , 'page'\n    , 'set-link-source'\n    , 'unicode-bidi'\n    ]\n\n  // regex tests\n  , HACK_PREFIX = new RegExp('^(' + hackPrefixes.join('|').replace(/[-[\\]{}()*+?.,\\\\^$#\\s]/g, \"\\\\$&\") + ')')\n  , VENDOR_PREFIX = new RegExp('^(' + vendorPrefixes.join('|').replace(/[-[\\]{}()*+?.,\\\\^$#\\s]/g, \"\\\\$&\") + ')')\n\n\n// validation method\nmodule.exports = function (def, data) {\n\n  // // default validation to true\n  var isValid = true\n    , dict = {}\n    , index = 0\n    , cleanRules\n    , sortedRules\n    , firstLine\n    , extract\n    , selector\n\n  // return if no rules to validate\n  if (!def.rules) return isValid\n\n  // recurse over nested rulesets\n  def.rules.forEach(function (rule) {\n    if (rule.selectors) module.exports(rule, data)\n  })\n\n  cleanRules = def.rules.map(function (rule) {\n    return rule.name && rule\n  }).filter(function (item) { return item })\n\n  // sort rules\n  sortedRules = _.sortBy(cleanRules, function (rule) {\n\n    // pad value of each rule position to account for vendor prefixes\n    var padding = (vendorPrefixes.length + 1) * 10\n      , root\n      , val\n\n    // strip vendor prefix and hack prefix from rule name to find root\n    root = rule.name\n      .replace(VENDOR_PREFIX, '')\n      .replace(HACK_PREFIX, '')\n\n    // find value of order of the root css property\n    val = order.indexOf(root)\n\n    // if property is not found, exit with property not found error\n    if (!~val) {\n      return util.throwError(def, {\n        type: 'propertyNotFound'\n      , message: 'Unknown property name: \"' + rule.name + '\"'\n      })\n    }\n\n    // pad value\n    val  = (val * padding) + 10\n\n    // adjust value based on prefix\n    val += VENDOR_PREFIX.exec(rule.name) ? vendorPrefixes.indexOf(RegExp.$1) : (vendorPrefixes.length + 1)\n\n    // adjust value based on css hack\n    val += HACK_PREFIX.exec(rule.name) ? (hackPrefixes.indexOf(RegExp.$1)) : 0\n\n    // return sort value\n    return val\n  })\n\n  // check to see if sortedRules has same order as provided rules\n  isValid = _.isEqual(sortedRules, cleanRules)\n\n  // return if sort is correct\n  if (isValid) return isValid\n\n  // get the line number of the first rule\n  firstLine = util.getLine(def.rules[0].index, data)\n\n  // generate a extract what the correct sorted rules would look like\n  extract = sortedRules.map(function (rule) {\n    if (!rule.name) return\n    return util.padLine(firstLine + index++)\n      + ' ' + rule.name + ': '\n      + (typeof rule.value == 'string' ? rule.value : rule.value.toCSS({}))\n      + ';'\n  }).filter(function (item) { return item }).join('\\n')\n\n  // extract selector for error message\n  selector = (' \"' + def.selectors.map(function (selector) {\n    return selector.toCSS && selector.toCSS({}).replace(/^\\s/, '')\n  }).join(', ') + '\"').magenta\n\n  // set error object on defintion token\n  util.throwError(def, {\n    type: RULE.type\n  , message: RULE.message + selector + '\\n\\n  Correct order below:\\n'.grey\n  , extract: extract\n  , sortedRules: sortedRules\n  , line: firstLine\n  })\n\n  // return valid state\n  return isValid\n}\n","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/lint/zero-units.js":"// ================================================\n// RECESS\n// RULE: No need to specify units when a value is 0\n// ================================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ================================================\n\n'use strict'\n\nvar util = require('../util')\n  , units = [\n      '%'\n    , 'in'\n    , 'cm'\n    , 'mm'\n    , 'em'\n    , 'ex'\n    , 'pt'\n    , 'pc'\n    , 'px'\n    ]\n  , RULE = {\n      type: 'zeroUnits'\n    , exp: new RegExp('\\\\b0\\\\s?(' + units.join('|') + ')')\n    , message: 'No need to specify units when a value is 0'\n    }\n\n// validation method\nmodule.exports = function (def, data) {\n\n  // default validation to true\n  var isValid = true\n\n  // return if no rules to validate\n  if (!def.rules) return isValid\n\n  // loop over rules\n  def.rules.forEach(function (rule) {\n    var extract\n      , line\n\n    // continue to next rule if no 0 units are present\n    if ( !(rule.value\n        && rule.value.is == 'value'\n        && RULE.exp.test(rule.value.toCSS({}))) ) return\n\n    // calculate line number for the extract\n    line = util.getLine(rule.index, data)\n    extract = util.padLine(line)\n\n    // highlight invalid 0 units\n    extract += rule.toCSS({}).replace(RULE.exp, function ($1) {\n      return 0 + $1.slice(1).magenta\n    })\n\n    // set invalid flag to false\n    isValid = false\n\n    // set error object on defintion token\n    util.throwError(def, {\n      type: RULE.type\n    , message: RULE.message\n    , extract: extract\n    , line: line\n    })\n\n  })\n\n  // return valid state\n  return isValid\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/compile/inline-images.js":"// ==========================================\n// RECESS\n// COMPILE: replaces image links with base64 image data\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\nvar less = require('less')\n  , fs = require('fs')\n  , seperator = (process.platform == 'win32') ? '\\\\' : '/'\n  , toCSS\n  , path\n\nfunction compile () {\n  // strip units from 0 values\n  var props = toCSS.apply(this, arguments)\n\n  // do we have a url here?\n  if (/url\\(/.test(props)) {\n    var fileName = props.match(/url\\((['\"]?)(.*)\\1\\)/)[2]\n      , ext = fileName.match(/[^.]*$/)[0]\n      , mimetype = 'image/' + ext.replace(/jpg/, 'jpeg')\n      , pathParts = path.split(seperator)\n      , filePath = pathParts.slice(0, pathParts.length - 1).join(seperator)\n      , imgBuffer = new Buffer(fs.readFileSync((filePath?filePath:'.')+seperator+fileName)).toString('base64')\n      , urlData = 'url(data:' + mimetype + ';base64,' + imgBuffer + ')'\n\n    return props.replace(/url\\([^\\)]*\\)/, urlData)\n  }\n\n  return props\n}\n\nmodule.exports.on = function () {\n  path = this.path\n  toCSS = less.tree.Value.prototype.toCSS\n  less.tree.Value.prototype.toCSS = compile\n}\n\nmodule.exports.off = function () {\n  less.tree.Value.prototype.toCSS = toCSS\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/compile/prefix-whitespace.js":"// ==========================================\n// RECESS\n// COMPILE: whitespace for vendor prefixes\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\nvar less = require('less')\n  , toCSS\n\n  // vendor prfixes\n  , vendorPrefixes = [\n    '-webkit-'\n  , '-khtml-'\n  , '-epub-'\n  , '-moz-'\n  , '-ms-'\n  , '-o-'\n  ]\n  , VENDOR_PREFIX = new RegExp('^(\\\\s*(?:' + vendorPrefixes.join('|').replace(/[-[\\]{}()*+?.,\\\\^$#\\s]/g, \"\\\\$&\") + '))')\n\n\n// space defintion\nfunction space(rules, i) {\n  var rule = rules[i]\n    , j = i - 1\n    , peek = rules[j]\n    , result = ''\n    , ruleRoot\n    , peekRoot\n    , ruleVal\n    , peekVal\n\n  // skip if not peak, rule, or rule.name\n  if (!peek || !rule || !rule.name) return\n\n  // if previous rule is not a css property, try searching up tree for nearest rule\n  while (!peek.name) {\n    peek = rules[j--]\n\n    // if none, then exit\n    if (!peek) return\n  }\n\n  // check to see if name has a vnedor prefix\n  if (VENDOR_PREFIX.test(peek.name)) {\n\n    // strip vendor prefix from rule and prior rule\n    ruleRoot = rule.name.replace(VENDOR_PREFIX, '')\n    peekRoot = peek.name.replace(VENDOR_PREFIX, '')\n\n\n    // if they share the same root calculate the offset in spacing\n    if (ruleRoot === peekRoot) {\n\n      // calculate the rules val\n      ruleVal = rule.name.match(VENDOR_PREFIX)\n      ruleVal = (ruleVal && ruleVal[0].length) || 0\n\n      // calculate the peeks val\n      peekVal = peek.name.match(VENDOR_PREFIX)\n      peekVal = (peekVal && peekVal[0].length) || 0\n\n      // if peek has a value, offset the rule val\n      if (peekVal) {\n        ruleVal = peekVal - ruleVal\n        while (ruleVal--) result += ' '\n      }\n\n    }\n  }\n\n  // prefix the rule with the white space offset\n  rule.name = result + rule.name\n}\n\nfunction compile (context, env) {\n  // iterate over rules and space each property\n  for (var i = 0; i < this.rules.length; i++) {\n    space(this.rules, i)\n  }\n\n  // apply to base CSS\n  return toCSS.apply(this, arguments)\n}\n\nmodule.exports.on = function () {\n  toCSS = less.tree.Ruleset.prototype.toCSS\n  less.tree.Ruleset.prototype.toCSS = compile\n}\n\nmodule.exports.off = function () {\n  less.tree.Ruleset.prototype.toCSS = toCSS\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/compile/strict-property-order.js":"// ==========================================\n// RECESS\n// COMPILE: automatically sort properties\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\nvar less = require('less')\n  , order = require('../lint/strict-property-order')\n  , toCSS\n\n\nfunction compile (context, env) {\n  var l\n\n  // test property order\n  order(this, env.data)\n\n  // search errors for sortedRules property\n  if (this.errors) {\n    for (l = this.errors.length; l--;) {\n\n      // if sorted rule found apply it, then exit\n      if (this.errors[l].sortedRules) {\n        this.rules = this.errors[l].sortedRules\n        break\n      }\n\n    }\n  }\n\n  // apply old toCSS method to updated object\n  return toCSS.apply(this, arguments)\n}\n\nmodule.exports.on = function () {\n  toCSS = less.tree.Ruleset.prototype.toCSS\n  less.tree.Ruleset.prototype.toCSS = compile\n}\n\nmodule.exports.off = function () {\n  less.tree.Ruleset.prototype.toCSS = toCSS\n}","/home/travis/build/npmtest/node-npmtest-recess/node_modules/recess/lib/compile/zero-units.js":"// ==========================================\n// RECESS\n// COMPILE: remove units from 0 values\n// ==========================================\n// Copyright 2012 Twitter, Inc\n// Licensed under the Apache License v2.0\n// http://www.apache.org/licenses/LICENSE-2.0\n// ==========================================\n\n'use strict'\n\nvar less = require('less')\n  , toCSS\n  , units = [\n      '%'\n    , 'in'\n    , 'cm'\n    , 'mm'\n    , 'em'\n    , 'ex'\n    , 'pt'\n    , 'pc'\n    , 'px'\n    ]\n  , UNITS = new RegExp('\\\\b0\\\\s?(' + units.join('|') + ')')\n\nfunction compile () {\n  // strip units from 0 values\n  var props = toCSS.apply(this, arguments)\n\n  // don't strip chars from hex codes\n  return /#/.test(props) ? props : props.replace(UNITS, '0')\n}\n\nmodule.exports.on = function () {\n  toCSS = less.tree.Value.prototype.toCSS\n  less.tree.Value.prototype.toCSS = compile\n}\n\nmodule.exports.off = function () {\n  less.tree.Value.prototype.toCSS = toCSS\n}"}